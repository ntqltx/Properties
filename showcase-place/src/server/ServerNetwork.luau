--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.3 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Promise = require(ReplicatedStorage.Shared.Promise)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
export type Properties = {[string]: any}
export type PartData = { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean }
local function ReadFUNCTION_DATA_GetProperties(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function WriteFUNCTION_RETURN_GetProperties(Value1: {[string]: any}, Value2: string?, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	local Elements_1 = 0
	for Key_1, Element_1 in Value1 do
		Elements_1 += 1
		local Length = #Key_1
		local OFFSET_0 = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET_0, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Key_1, Length)
		table.insert(SendInstances, if Element_1 == nil then Null else Element_1)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Elements_1)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value2 ~= nil and 1 or 0)
	if Value2 ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		local Length = #Value2
		buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Value2, Length)
	end
end

local function ReadFUNCTION_DATA_CreatePart(): ({ Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean })
	-- Read BLOCK: 19 bytes
	local BLOCK_START = Read(19)
	local Value = {} :: any
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	Value.Size = Vector3.new(X, Y, Z)
	Value.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, BLOCK_START + 12), buffer.readu8(RecieveBuffer, BLOCK_START + 13), buffer.readu8(RecieveBuffer, BLOCK_START + 14))
	RecieveInstanceCursor += 1
	Value.Material = RecieveInstances[RecieveInstanceCursor]
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 15)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.Transparency = -math.huge
		else
			Value.Transparency = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.Transparency = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.Transparency = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Value.CastShadow = (buffer.readu8(RecieveBuffer, BLOCK_START + 17) == 1)
	Value.Anchored = (buffer.readu8(RecieveBuffer, BLOCK_START + 18) == 1)
	return Value
end

local function WriteFUNCTION_RETURN_CreatePart(Value: string, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	GetProperties = {
		On = NOOP
	},
	CreatePart = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: string = ReadFUNCTION_DATA_GetProperties()
			if Events.Reliable[0] ~= nil then
				task.spawn(Events.Reliable[0], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"GetProperties\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean } = ReadFUNCTION_DATA_CreatePart()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"CreatePart\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value, InvocationIdentifier} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	GetProperties = {
		On = function(Listener: (Player, string) -> ({[string]: any}, string?)): ()
			Events.Reliable[0] = function(Player: Player, Value: string, InvocationIdentifier: number): ()
				local ReturnValue1: {[string]: any}, ReturnValue2: string?;
				local Success, Error = pcall(function ()
					ReturnValue1, ReturnValue2 = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 0)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"GetProperties" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_GetProperties(ReturnValue1, ReturnValue2, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[0] or {}
				Queue.Reliable[0] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[0](table.unpack(Arguments))
				end
			end)
		end
	},
	CreatePart = {
		On = function(Listener: (Player, { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean }) -> (string)): ()
			Events.Reliable[1] = function(Player: Player, Value: { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean }, InvocationIdentifier: number): ()
				local ReturnValue: string;
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 1)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"CreatePart" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_CreatePart(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[1] or {}
				Queue.Reliable[1] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[1](table.unpack(Arguments))
				end
			end)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL