--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.3 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Promise = require(ReplicatedStorage.Shared.Promise)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
export type Properties = {[string]: any}
export type PartData = { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean }
local function WriteFUNCTION_DATA_GetProperties(Value: string, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 2, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function ReadFUNCTION_RETURN_GetProperties(): ({[string]: any}, string?)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Value1 = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 1)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(2)
		local Length = buffer.readu16(RecieveBuffer, OFFSET_0)
		local Key_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		RecieveInstanceCursor += 1
		local Element_1 = RecieveInstances[RecieveInstanceCursor]
		Value1[Key_1] = Element_1
	end
	local Value2
	if buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	return Value1, Value2
end

local function WriteFUNCTION_DATA_CreatePart(Value: { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 21 bytes
	local BLOCK_START = Allocate(21)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	local Vector = Value.Size
	buffer.writef32(SendBuffer, BLOCK_START + 2, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 6, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 10, Vector.Z)
	local Color = Value.Color
	buffer.writeu8(SendBuffer, BLOCK_START + 14, Color.R * 255)
	buffer.writeu8(SendBuffer, BLOCK_START + 15, Color.G * 255)
	buffer.writeu8(SendBuffer, BLOCK_START + 16, Color.B * 255)
	table.insert(SendInstances, if Value.Material == nil then Null else Value.Material)
	if Value.Transparency > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 17, 0b0_11111_0000000000)
	elseif Value.Transparency < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 17, 0b1_11111_0000000000)
	elseif Value.Transparency ~= Value.Transparency then
		buffer.writeu16(SendBuffer, BLOCK_START + 17, 0b1_11111_0000000001)
	elseif Value.Transparency == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 17, 0)
	else
		local float = Value.Transparency
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 17, Result)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 19, Value.CastShadow and 1 or 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 20, Value.Anchored and 1 or 0)
end

local function ReadFUNCTION_RETURN_CreatePart(): (string)
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 1)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	GetProperties = {
		Invoke = NOOP
	},
	CreatePart = {
		Invoke = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue1, ReturnValue2 = pcall(function ()
					return ReadFUNCTION_RETURN_GetProperties()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue1, ReturnValue2)
				Calls[InvocationIdentifier] = nil
			end
		elseif Index == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return ReadFUNCTION_RETURN_CreatePart()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	GetProperties = {
		Invoke = function(Value: string): any
			return Promise.new(function (Resolve, Reject, OnCancel)
				local InvocationIdentifier = Invoke()
				if Calls[InvocationIdentifier] ~= nil then
					Invocations -= 1
					error("More than 256 calls are awaiting a response, this packet has been dropped.")
				end
				WriteFUNCTION_DATA_GetProperties(Value, InvocationIdentifier)
				Calls[InvocationIdentifier] = coroutine.running()
				OnCancel(function ()
					Calls[InvocationIdentifier] = nil
				end)
				local Success, ReturnValue1: {[string]: any}, ReturnValue2: string? = coroutine.yield()
				if Success ~= true then
					Reject("There was an exception while processing \"GetProperties\".")
					return 
				end
				Resolve(ReturnValue1, ReturnValue2)
			end)
		end
	},
	CreatePart = {
		Invoke = function(Value: { Size: Vector3, Color: Color3, Material: any, Transparency: number, CastShadow: boolean, Anchored: boolean }): (string)
			local InvocationIdentifier = Invoke()
			if Calls[InvocationIdentifier] ~= nil then
				Invocations -= 1
				error("More than 256 calls are awaiting a response, this packet has been dropped.")
			end
			WriteFUNCTION_DATA_CreatePart(Value, InvocationIdentifier)
			Calls[InvocationIdentifier] = coroutine.running()
			local Success, ReturnValue: string = coroutine.yield()
			if Success ~= true then
				error("There was an exception while processing \"CreatePart\".")
			end
			return ReturnValue
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL